
Topics
premium lock icon
Companies
Hint
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:

Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.
 

Constraints:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.






*********************************************************************************************************************************






class Solution {
    public int findShortestSubArray(int[] nums) {
        int max = 0;
        ArrayList<Integer> arr = new ArrayList<>();
        Map<Integer, Integer> mp = new HashMap<>();
        for(int num:nums){
            mp.put(num, mp.getOrDefault(num, 0)+1);
            max = Math.max(max,mp.get(num));
        }

        for(var entry: mp.entrySet()){
            if(entry.getValue()==max){
                arr.add(entry.getKey());
            }
        }
        int ans = (int)1e9;
        for(int i=0;i<arr.size();i++){
            int val = arr.get(i);
            int s = 0;
            int e = nums.length-1;
            while(nums[s]!=val)s++;
            while(nums[e]!=val)e--;
            int len = e-s+1;
            ans = Math.min(ans,len);
        }
        return ans;
    }
}
